/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DID {
  export type AttributeStruct = {
    name: BytesLike;
    value: BytesLike;
    validity: BigNumberish;
    created: BigNumberish;
  };

  export type AttributeStructOutput = [string, string, number, BigNumber] & {
    name: string;
    value: string;
    validity: number;
    created: BigNumber;
  };
}

export declare namespace ErebrusRegistry {
  export type VPNNodeStruct = {
    user: string;
    peaqDid: string;
    nodename: string;
    ipaddress: string;
    ispinfo: string;
    region: string;
    location: string;
    status: BigNumberish;
  };

  export type VPNNodeStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    number
  ] & {
    user: string;
    peaqDid: string;
    nodename: string;
    ipaddress: string;
    ispinfo: string;
    region: string;
    location: string;
    status: number;
  };
}

export interface ErebrusRegistryInterface extends utils.Interface {
  contractName: "ErebrusRegistry";
  functions: {
    "VpnDeviceCheckpoints(uint256,uint256)": FunctionFragment;
    "addAttribute(address,bytes,bytes,uint32)": FunctionFragment;
    "deactivateNode(uint256)": FunctionFragment;
    "didToUser(address)": FunctionFragment;
    "getWifiDetails(uint256)": FunctionFragment;
    "readAttribute(address,bytes)": FunctionFragment;
    "registerVpnNode((address,string,string,string,string,string,string,uint8))": FunctionFragment;
    "registerWifiNode(string,string,string,string,uint256)": FunctionFragment;
    "removeAttribute(address,bytes)": FunctionFragment;
    "updateAttribute(address,bytes,bytes,uint32)": FunctionFragment;
    "updateVPNNode(uint256,uint8,string)": FunctionFragment;
    "updateWiFiNode(uint256,string,string,uint256)": FunctionFragment;
    "vpnDeviceCheckpoint(uint256,string)": FunctionFragment;
    "vpnNodeOperators(uint256)": FunctionFragment;
    "vpnTotalCheckpoints(uint256)": FunctionFragment;
    "wifiDeviceCheckpoint(uint256,string)": FunctionFragment;
    "wifiDeviceCheckpoints(uint256,uint256)": FunctionFragment;
    "wifiNodeOperators(uint256)": FunctionFragment;
    "wifiTotalCheckpoints(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "VpnDeviceCheckpoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addAttribute",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateNode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "didToUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getWifiDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readAttribute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVpnNode",
    values: [ErebrusRegistry.VPNNodeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWifiNode",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAttribute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttribute",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVPNNode",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWiFiNode",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vpnDeviceCheckpoint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vpnNodeOperators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vpnTotalCheckpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wifiDeviceCheckpoint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "wifiDeviceCheckpoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wifiNodeOperators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wifiTotalCheckpoints",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "VpnDeviceCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "didToUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWifiDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVpnNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWifiNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVPNNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWiFiNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vpnDeviceCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vpnNodeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vpnTotalCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wifiDeviceCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wifiDeviceCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wifiNodeOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wifiTotalCheckpoints",
    data: BytesLike
  ): Result;

  events: {
    "AddAttribute(address,address,bytes,bytes,uint32)": EventFragment;
    "NodeDeactivated(address)": EventFragment;
    "NodeOperatorUpdated(address,string,string)": EventFragment;
    "RemoveAttribte(address,bytes)": EventFragment;
    "UpdateAttribute(address,address,bytes,bytes,uint32)": EventFragment;
    "VPNUpdated(uint256,uint8,string)": EventFragment;
    "VpnNodeRegistered(uint256,string,string,string,string,string)": EventFragment;
    "WifiNodeOperatorRegistered(uint256,address,string,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAttribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeOperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAttribte"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAttribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VPNUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VpnNodeRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WifiNodeOperatorRegistered"): EventFragment;
}

export type AddAttributeEvent = TypedEvent<
  [string, string, string, string, number],
  {
    sender: string;
    did_account: string;
    name: string;
    value: string;
    validity: number;
  }
>;

export type AddAttributeEventFilter = TypedEventFilter<AddAttributeEvent>;

export type NodeDeactivatedEvent = TypedEvent<
  [string],
  { operatorAddress: string }
>;

export type NodeDeactivatedEventFilter = TypedEventFilter<NodeDeactivatedEvent>;

export type NodeOperatorUpdatedEvent = TypedEvent<
  [string, string, string],
  { operatorAddress: string; ssid: string; location: string }
>;

export type NodeOperatorUpdatedEventFilter =
  TypedEventFilter<NodeOperatorUpdatedEvent>;

export type RemoveAttribteEvent = TypedEvent<
  [string, string],
  { did_account: string; name: string }
>;

export type RemoveAttribteEventFilter = TypedEventFilter<RemoveAttribteEvent>;

export type UpdateAttributeEvent = TypedEvent<
  [string, string, string, string, number],
  {
    sender: string;
    did_account: string;
    name: string;
    value: string;
    validity: number;
  }
>;

export type UpdateAttributeEventFilter = TypedEventFilter<UpdateAttributeEvent>;

export type VPNUpdatedEvent = TypedEvent<
  [BigNumber, number, string],
  { nodeId: BigNumber; updatedStatus: number; updatedRegion: string }
>;

export type VPNUpdatedEventFilter = TypedEventFilter<VPNUpdatedEvent>;

export type VpnNodeRegisteredEvent = TypedEvent<
  [BigNumber, string, string, string, string, string],
  {
    nodeId: BigNumber;
    nodename: string;
    ipaddress: string;
    ispinfo: string;
    region: string;
    location: string;
  }
>;

export type VpnNodeRegisteredEventFilter =
  TypedEventFilter<VpnNodeRegisteredEvent>;

export type WifiNodeOperatorRegisteredEvent = TypedEvent<
  [BigNumber, string, string, string, string, BigNumber],
  {
    nodeID: BigNumber;
    owner: string;
    deviceId: string;
    ssid: string;
    location: string;
    pricePerMinute: BigNumber;
  }
>;

export type WifiNodeOperatorRegisteredEventFilter =
  TypedEventFilter<WifiNodeOperatorRegisteredEvent>;

export interface ErebrusRegistry extends BaseContract {
  contractName: "ErebrusRegistry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ErebrusRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VpnDeviceCheckpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivateNode(
      nodeID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    didToUser(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getWifiDetails(
      nodeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { price: BigNumber; owner: string }>;

    readAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[DID.AttributeStructOutput]>;

    registerVpnNode(
      node: ErebrusRegistry.VPNNodeStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerWifiNode(
      _deviceId: string,
      _peaqDid: string,
      _ssid: string,
      _location: string,
      _pricePermin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVPNNode(
      nodeID: BigNumberish,
      _status: BigNumberish,
      _region: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWiFiNode(
      nodeID: BigNumberish,
      ssid: string,
      location: string,
      pricePerMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vpnDeviceCheckpoint(
      nodeID: BigNumberish,
      dataHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vpnNodeOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, number] & {
        user: string;
        peaqDid: string;
        nodename: string;
        ipaddress: string;
        ispinfo: string;
        region: string;
        location: string;
        status: number;
      }
    >;

    vpnTotalCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    wifiDeviceCheckpoint(
      nodeID: BigNumberish,
      dataHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wifiDeviceCheckpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    wifiNodeOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, boolean] & {
        user: string;
        deviceId: string;
        peaqDid: string;
        ssid: string;
        location: string;
        pricePerMinute: BigNumber;
        isActive: boolean;
      }
    >;

    wifiTotalCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  VpnDeviceCheckpoints(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  addAttribute(
    did_account: string,
    name: BytesLike,
    value: BytesLike,
    validity_for: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivateNode(
    nodeID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  didToUser(arg0: string, overrides?: CallOverrides): Promise<string>;

  getWifiDetails(
    nodeID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { price: BigNumber; owner: string }>;

  readAttribute(
    did_account: string,
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<DID.AttributeStructOutput>;

  registerVpnNode(
    node: ErebrusRegistry.VPNNodeStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerWifiNode(
    _deviceId: string,
    _peaqDid: string,
    _ssid: string,
    _location: string,
    _pricePermin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAttribute(
    did_account: string,
    name: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAttribute(
    did_account: string,
    name: BytesLike,
    value: BytesLike,
    validity_for: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVPNNode(
    nodeID: BigNumberish,
    _status: BigNumberish,
    _region: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWiFiNode(
    nodeID: BigNumberish,
    ssid: string,
    location: string,
    pricePerMin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vpnDeviceCheckpoint(
    nodeID: BigNumberish,
    dataHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vpnNodeOperators(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, number] & {
      user: string;
      peaqDid: string;
      nodename: string;
      ipaddress: string;
      ispinfo: string;
      region: string;
      location: string;
      status: number;
    }
  >;

  vpnTotalCheckpoints(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wifiDeviceCheckpoint(
    nodeID: BigNumberish,
    dataHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wifiDeviceCheckpoints(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  wifiNodeOperators(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, BigNumber, boolean] & {
      user: string;
      deviceId: string;
      peaqDid: string;
      ssid: string;
      location: string;
      pricePerMinute: BigNumber;
      isActive: boolean;
    }
  >;

  wifiTotalCheckpoints(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    VpnDeviceCheckpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deactivateNode(
      nodeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    didToUser(arg0: string, overrides?: CallOverrides): Promise<string>;

    getWifiDetails(
      nodeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { price: BigNumber; owner: string }>;

    readAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<DID.AttributeStructOutput>;

    registerVpnNode(
      node: ErebrusRegistry.VPNNodeStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    registerWifiNode(
      _deviceId: string,
      _peaqDid: string,
      _ssid: string,
      _location: string,
      _pricePermin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateVPNNode(
      nodeID: BigNumberish,
      _status: BigNumberish,
      _region: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWiFiNode(
      nodeID: BigNumberish,
      ssid: string,
      location: string,
      pricePerMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    vpnDeviceCheckpoint(
      nodeID: BigNumberish,
      dataHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vpnNodeOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, string, number] & {
        user: string;
        peaqDid: string;
        nodename: string;
        ipaddress: string;
        ispinfo: string;
        region: string;
        location: string;
        status: number;
      }
    >;

    vpnTotalCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wifiDeviceCheckpoint(
      nodeID: BigNumberish,
      dataHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wifiDeviceCheckpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    wifiNodeOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, BigNumber, boolean] & {
        user: string;
        deviceId: string;
        peaqDid: string;
        ssid: string;
        location: string;
        pricePerMinute: BigNumber;
        isActive: boolean;
      }
    >;

    wifiTotalCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddAttribute(address,address,bytes,bytes,uint32)"(
      sender?: null,
      did_account?: null,
      name?: null,
      value?: null,
      validity?: null
    ): AddAttributeEventFilter;
    AddAttribute(
      sender?: null,
      did_account?: null,
      name?: null,
      value?: null,
      validity?: null
    ): AddAttributeEventFilter;

    "NodeDeactivated(address)"(
      operatorAddress?: string | null
    ): NodeDeactivatedEventFilter;
    NodeDeactivated(
      operatorAddress?: string | null
    ): NodeDeactivatedEventFilter;

    "NodeOperatorUpdated(address,string,string)"(
      operatorAddress?: string | null,
      ssid?: null,
      location?: null
    ): NodeOperatorUpdatedEventFilter;
    NodeOperatorUpdated(
      operatorAddress?: string | null,
      ssid?: null,
      location?: null
    ): NodeOperatorUpdatedEventFilter;

    "RemoveAttribte(address,bytes)"(
      did_account?: null,
      name?: null
    ): RemoveAttribteEventFilter;
    RemoveAttribte(did_account?: null, name?: null): RemoveAttribteEventFilter;

    "UpdateAttribute(address,address,bytes,bytes,uint32)"(
      sender?: null,
      did_account?: null,
      name?: null,
      value?: null,
      validity?: null
    ): UpdateAttributeEventFilter;
    UpdateAttribute(
      sender?: null,
      did_account?: null,
      name?: null,
      value?: null,
      validity?: null
    ): UpdateAttributeEventFilter;

    "VPNUpdated(uint256,uint8,string)"(
      nodeId?: null,
      updatedStatus?: null,
      updatedRegion?: null
    ): VPNUpdatedEventFilter;
    VPNUpdated(
      nodeId?: null,
      updatedStatus?: null,
      updatedRegion?: null
    ): VPNUpdatedEventFilter;

    "VpnNodeRegistered(uint256,string,string,string,string,string)"(
      nodeId?: null,
      nodename?: null,
      ipaddress?: null,
      ispinfo?: null,
      region?: null,
      location?: null
    ): VpnNodeRegisteredEventFilter;
    VpnNodeRegistered(
      nodeId?: null,
      nodename?: null,
      ipaddress?: null,
      ispinfo?: null,
      region?: null,
      location?: null
    ): VpnNodeRegisteredEventFilter;

    "WifiNodeOperatorRegistered(uint256,address,string,string,string,uint256)"(
      nodeID?: null,
      owner?: string | null,
      deviceId?: null,
      ssid?: null,
      location?: null,
      pricePerMinute?: null
    ): WifiNodeOperatorRegisteredEventFilter;
    WifiNodeOperatorRegistered(
      nodeID?: null,
      owner?: string | null,
      deviceId?: null,
      ssid?: null,
      location?: null,
      pricePerMinute?: null
    ): WifiNodeOperatorRegisteredEventFilter;
  };

  estimateGas: {
    VpnDeviceCheckpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivateNode(
      nodeID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    didToUser(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getWifiDetails(
      nodeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerVpnNode(
      node: ErebrusRegistry.VPNNodeStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerWifiNode(
      _deviceId: string,
      _peaqDid: string,
      _ssid: string,
      _location: string,
      _pricePermin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVPNNode(
      nodeID: BigNumberish,
      _status: BigNumberish,
      _region: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWiFiNode(
      nodeID: BigNumberish,
      ssid: string,
      location: string,
      pricePerMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vpnDeviceCheckpoint(
      nodeID: BigNumberish,
      dataHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vpnNodeOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vpnTotalCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wifiDeviceCheckpoint(
      nodeID: BigNumberish,
      dataHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wifiDeviceCheckpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wifiNodeOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wifiTotalCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VpnDeviceCheckpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivateNode(
      nodeID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    didToUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWifiDetails(
      nodeID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerVpnNode(
      node: ErebrusRegistry.VPNNodeStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerWifiNode(
      _deviceId: string,
      _peaqDid: string,
      _ssid: string,
      _location: string,
      _pricePermin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVPNNode(
      nodeID: BigNumberish,
      _status: BigNumberish,
      _region: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWiFiNode(
      nodeID: BigNumberish,
      ssid: string,
      location: string,
      pricePerMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vpnDeviceCheckpoint(
      nodeID: BigNumberish,
      dataHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vpnNodeOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vpnTotalCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wifiDeviceCheckpoint(
      nodeID: BigNumberish,
      dataHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wifiDeviceCheckpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wifiNodeOperators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wifiTotalCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
