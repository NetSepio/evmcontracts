/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace DID {
  export type AttributeStruct = {
    name: BytesLike;
    value: BytesLike;
    validity: BigNumberish;
    created: BigNumberish;
  };

  export type AttributeStructOutput = [string, string, number, BigNumber] & {
    name: string;
    value: string;
    validity: number;
    created: BigNumber;
  };
}

export interface DIDInterface extends utils.Interface {
  contractName: "DID";
  functions: {
    "addAttribute(address,bytes,bytes,uint32)": FunctionFragment;
    "readAttribute(address,bytes)": FunctionFragment;
    "removeAttribute(address,bytes)": FunctionFragment;
    "updateAttribute(address,bytes,bytes,uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAttribute",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readAttribute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAttribute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttribute",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttribute",
    data: BytesLike
  ): Result;

  events: {
    "AddAttribute(address,address,bytes,bytes,uint32)": EventFragment;
    "RemoveAttribte(address,bytes)": EventFragment;
    "UpdateAttribute(address,address,bytes,bytes,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAttribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAttribte"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAttribute"): EventFragment;
}

export type AddAttributeEvent = TypedEvent<
  [string, string, string, string, number],
  {
    sender: string;
    did_account: string;
    name: string;
    value: string;
    validity: number;
  }
>;

export type AddAttributeEventFilter = TypedEventFilter<AddAttributeEvent>;

export type RemoveAttribteEvent = TypedEvent<
  [string, string],
  { did_account: string; name: string }
>;

export type RemoveAttribteEventFilter = TypedEventFilter<RemoveAttribteEvent>;

export type UpdateAttributeEvent = TypedEvent<
  [string, string, string, string, number],
  {
    sender: string;
    did_account: string;
    name: string;
    value: string;
    validity: number;
  }
>;

export type UpdateAttributeEventFilter = TypedEventFilter<UpdateAttributeEvent>;

export interface DID extends BaseContract {
  contractName: "DID";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DIDInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    readAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[DID.AttributeStructOutput]>;

    removeAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAttribute(
    did_account: string,
    name: BytesLike,
    value: BytesLike,
    validity_for: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  readAttribute(
    did_account: string,
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<DID.AttributeStructOutput>;

  removeAttribute(
    did_account: string,
    name: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAttribute(
    did_account: string,
    name: BytesLike,
    value: BytesLike,
    validity_for: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    readAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<DID.AttributeStructOutput>;

    removeAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AddAttribute(address,address,bytes,bytes,uint32)"(
      sender?: null,
      did_account?: null,
      name?: null,
      value?: null,
      validity?: null
    ): AddAttributeEventFilter;
    AddAttribute(
      sender?: null,
      did_account?: null,
      name?: null,
      value?: null,
      validity?: null
    ): AddAttributeEventFilter;

    "RemoveAttribte(address,bytes)"(
      did_account?: null,
      name?: null
    ): RemoveAttribteEventFilter;
    RemoveAttribte(did_account?: null, name?: null): RemoveAttribteEventFilter;

    "UpdateAttribute(address,address,bytes,bytes,uint32)"(
      sender?: null,
      did_account?: null,
      name?: null,
      value?: null,
      validity?: null
    ): UpdateAttributeEventFilter;
    UpdateAttribute(
      sender?: null,
      did_account?: null,
      name?: null,
      value?: null,
      validity?: null
    ): UpdateAttributeEventFilter;
  };

  estimateGas: {
    addAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    readAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    readAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAttribute(
      did_account: string,
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAttribute(
      did_account: string,
      name: BytesLike,
      value: BytesLike,
      validity_for: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
