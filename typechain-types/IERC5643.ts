/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IERC5643Interface extends utils.Interface {
  contractName: "IERC5643";
  functions: {
    "cancelSubscription(uint256)": FunctionFragment;
    "expiresAt(uint256)": FunctionFragment;
    "isRenewable(uint256)": FunctionFragment;
    "renewSubscription(uint256,uint64)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expiresAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isRenewable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewSubscription",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiresAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRenewable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewSubscription",
    data: BytesLike
  ): Result;

  events: {
    "SubscriptionUpdate(uint256,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SubscriptionUpdate"): EventFragment;
}

export type SubscriptionUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  { tokenId: BigNumber; expiration: BigNumber }
>;

export type SubscriptionUpdateEventFilter =
  TypedEventFilter<SubscriptionUpdateEvent>;

export interface IERC5643 extends BaseContract {
  contractName: "IERC5643";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC5643Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelSubscription(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expiresAt(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isRenewable(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renewSubscription(
      tokenId: BigNumberish,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelSubscription(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expiresAt(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isRenewable(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renewSubscription(
    tokenId: BigNumberish,
    duration: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelSubscription(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    expiresAt(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRenewable(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renewSubscription(
      tokenId: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SubscriptionUpdate(uint256,uint64)"(
      tokenId?: BigNumberish | null,
      expiration?: null
    ): SubscriptionUpdateEventFilter;
    SubscriptionUpdate(
      tokenId?: BigNumberish | null,
      expiration?: null
    ): SubscriptionUpdateEventFilter;
  };

  estimateGas: {
    cancelSubscription(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expiresAt(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRenewable(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renewSubscription(
      tokenId: BigNumberish,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelSubscription(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expiresAt(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRenewable(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renewSubscription(
      tokenId: BigNumberish,
      duration: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
